# 알고리즘 복잡도 표현방법

# 1. 알고리즘 복잡도 계산이 필요한 이유 
# 하나의 문제를 푸는 알고리즘은 다양할 수 있다. 다양한 알고리즘 중 어떤 알고리즘이 좋은지 분석하기 위해서 복잡도를 정의하고 계산한다. 

# 2. 알고리즘 복잡도 계산 항목 
# 1) 시간 복잡도 : 알고리즘 실행속도
# 2) 공간 복잡도 : 알고리즘이 사용하는 메모리 사이즈 

# 알고리즘 시간 복잡도의 주요 요소는 반복문.
 
# 알고리즘 성능 표기법 
# * 빅오 표기법 : O(N)
# 알고리즘 최악의 실행시간을 표기한다.
# 일반적으로 가장 많이 사용함 
# 아무리 최악의 상황이라도 이정도의 성능은 보장한다는 의미이다. 

# * 오메가 표기법 
# 오메가 표기법은 알고리즘 최상의 실행시간을 표기한다.

# * 세타 표기법
# 알고리즘 평균 실행시간을 표기한다. 

# 시간복잡도의 계산은 반복문이 핵심요소이고, 계산표기법은 최악의 시간인 Big O표기법을 중심으로 익히면 된다. 

# * Big O 표기법
# 표현식에 가장 큰 영향을 미치는 n의 단위로 표기
# - 무조건 n회 실행한다. => O(1) 
# - n에 따라 n번 n+10번 또는 3n+10번등 실행한다. => O(n)  
# - n에 따라 n^2번, n^2+1000번 등 실행한다. => O(n^2)

# 1부터 n까지 구하는 알고리즘 
# 1) O(n) 
def sum_all(n):
    total = 0
    for index in range(1, n+1):
        total += index
    return total

# 2) O(1) <== 반복문이 없음
def sum_all2(n):
    return n*(n+1)/2
